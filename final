package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// ------------ Créer une fonction pour lire un l'input -----------//
func ReadTheFile(input string) string {

	data, err := os.ReadFile(input)
	if err != nil {
		errFile := "ERROR: open " + string(input) + ": no such file or directory"
		fmt.Println(errFile)
		os.Exit(1)
	}
	return string(data)
}

// -----Créer et écrire dans un fichier-----//
func CreateAndWriteInAFile(output, finalContent string) {
	//création du fichier de sortie
	newFile, _ := os.Create(output)
	//écriture dans le nouveau fichier
	// writeInFile, _ := newFile.WriteString(finalContent)
	_, err := newFile.WriteString(finalContent)
	if err != nil {
		fmt.Println("error detected")
	}

	// fmt.Printf("last: %v\n", writeInFile)

}

//-----Vérifier qu'un élément est dans un tableau donnée-----//

func Contains(arr []string, ele string) bool {
	for _, v := range arr {
		if v == ele {
			return true
		}
	}
	return false
}

//-------Capitalise la premiére lettre et low le reste----//

func Capitalise(s string) string {

	so := []rune(s)
	count := 0
	for i := 0; i < len(s); i++ {
		if (so[i] >= 'a' && so[i] <= 'z') || (so[i] >= 'A' && so[i] <= 'Z') || (so[i] >= '0' && so[i] <= '9') {
			count++
		} else {
			count = 0
		}

		if count == 1 && so[i] >= 'a' && so[i] <= 'z' {
			so[i] -= 32

		} else if count > 1 && so[i] >= 'A' && so[i] <= 'Z' {
			so[i] += 32

		}
	}

	return string(so)
}

//--------Sort le nombre compris dans une chaine de caractére-----//

func Trimatoi(s string) int {
	signe := 1
	num := 0

	for i := 0; i < len(s); i++ {
		if s[i] >= '0' && s[i] <= '9' {
			num *= 10
			num += int(s[i] - 48)
		} else if s[i] == '-' && num == 0 {
			signe = -1
		}
	}
	return num * signe
}

// -------Vérifie le format du mot suivant-----//
func VerifyFormat(s []string, ele string) bool {
	number := Trimatoi(ele)
	//string du nombre
	numToString := strconv.Itoa(number)
	b := numToString + ")"
	return ele == b
}

// -------conversion base hexadecimal à la base de 10-----//
func ConvertBaseHexToTen(indicateur string) (string, bool) {
	var int64ToString string
	hex := true
	baseHexa, err := strconv.ParseInt(indicateur, 16, 64)
	if err != nil {
		fmt.Println("Veuillez saisir un nombre hex valide")
		hex = false

	} else {
		int64ToString = strconv.FormatInt(baseHexa, 10)

	}
	return int64ToString, hex
}

// --------conversion base binaire à la base de 10 ----------//
func ConvertBaseBinToTen(indicateur string) (string, bool) {
	var int64ToString string
	bin := true
	baseBin, err := strconv.ParseInt(indicateur, 2, 64)
	if err != nil {
		fmt.Println("Veuillez saisir un nombre bin valide")
		bin = false
	} else {
		int64ToString = strconv.FormatInt(baseBin, 10)
	}
	return int64ToString, bin
}

// -----------Ponctuations séparation----------//
func Ponctuations(s string) string {
	arr := []string{",", ";", ":", "!", "?", "."}
	for i := 0; i < len(arr); i++ {
		// separation
		s = strings.ReplaceAll(s, arr[i], " "+arr[i]+" ")
	}
	return s
}

// ---------Concaténe les (up et consort avec la virgule qui les suit----------//
func ReunionWithCommas(arr []string) []string {
	for i := 0; i < len(arr); i++ {
		if arr[i] == "(up" {
			arr[i] = "(up,"
			arr[i+1] = " "
		}
		if arr[i] == "(low" {
			arr[i] = "(low,"
			arr[i+1] = " "
		}
		if arr[i] == "(cap" {
			arr[i] = "(cap,"
			arr[i+1] = " "
		}
	}
	return arr
}

// -----------Eliminer les espaces superflues-------//
func Restructuration(s []string) []string {
	f := strings.Join(s, " ")
	s = strings.Fields(f)
	return s
}

//test

func Spaces(s string) string {
	p := []string{",", ".", ":", ";", "!", "?"}

	for i := 0; i < len(p); i++ {
		s = strings.ReplaceAll(s, p[i], " "+p[i]+" ")
	}
	return s
}

// ----------Permuter les ponctuations qui sont derriére les (cap) et consort------//, "'"
func Permutation(s []string) []string {

	for i := 1; i < len(s); i++ {
		a := []string{"(cap)", "(low)", "(up)", "(low,", "(cap,", "(up,", "(hex)", "(bin)"}
		// b := []string{"(low,", "(cap,", "(up,"}
		p := []string{",", ".", ":", ";", "!", "?"}
		// if i == 0{}
		if Contains(p, s[i]) && Contains(a, s[i-1]) {
			tampon := s[i]
			s[i] = s[i-1]
			s[i-1] = tampon

			// fmt.Println(s, 0)
			return Permutation(s)
		}
		if i >= 2 {
			if Contains(p, s[i]) && (s[i-2] == "(low," || s[i-2] == "(cap," || s[i-2] == "(up,") {
				//s[i-2] == "(low,"
				tampon := s[i]
				s[i] = s[i-1]
				s[i-1] = tampon

				return Permutation(s)
			}
		}
	}

	return s

}

// --------Appliquer les changements pour la permutation------//
func ApplyChangeForPermutations(s string) string {
	p := []string{",", ".", ":", ";", "!", "?"}

	for i := 0; i < len(p); i++ {
		s = strings.ReplaceAll(s, " "+p[i], p[i])
	}
	// s = strings.ReplaceAll(s, " .", ".")

	return s
}

// --------------Apostrophes-------------//
func Apostrophe(s string) string {
	so := []rune(s)

	var l, last []rune

	num := 2023
	year := rune(num)
	num0 := 2022
	anne := rune(num0)
	count := 0

	for i := 0; i < len(so); i++ {
		if i >= 1 && i < len(so)-1 {
			if so[i] == 39 && s[i+1] != ' ' && s[i-1] != ' ' {
				so[i] = anne
			}
		}
	}
	for i := 0; i < len(so); i++ {
		if so[i] == 39 {
			count++
		}
		if count%2 != 0 && so[i] == ' ' && so[i-1] == 39 {
			l = append(l, year)

		} else if count%2 == 0 && so[i] == 39 && so[i-1] == ' ' && i != 0 {

			l[i-1] = year
			l = append(l, so[i])
		} else {
			l = append(l, so[i])
		}
	}

	for _, v := range l {
		if v != year {
			last = append(last, v)
		}
	}
	for i := 0; i < len(last); i++ {
		if last[i] == anne {
			last[i] = 39
			fmt.Println("i'am here")
		}
	}

	return string(last)
}

//-------------Article------------//

func Article(s string) string {
	arc := []string{"a", "e", "i", "u", "o", "h", "A", "E", "I", "U", "O", "H"}
	for i := 0; i < len(arc); i++ {
		if len(s) > 1 {

			if (s[0] == 'a' || s[0] == 'A') && s[1] == ' ' && Contains(arc, string(s[2])) {
				s = string(s[0]) + "n" + " " + string(s[2:])
			} else {

			}

			s = strings.ReplaceAll(s, " a "+arc[i], " an "+arc[i])
			s = strings.ReplaceAll(s, " A "+arc[i], " An "+arc[i])
			s = strings.ReplaceAll(s, " a '"+arc[i], " an '"+arc[i])
			s = strings.ReplaceAll(s, " A '"+arc[i], " An '"+arc[i])

		}
	}

	return s
}

// -----fonction combinée----//
func Try(input, output string) {
	var finalArray, firstArray []string

	all := []string{"(up)", "(cap)", "(low)", "(up,", "(cap,", "(low,", "(hex)", "(bin)"}
	once := []string{"(up,", "(cap,", "(low,"}

	filecontent := ReadTheFile(input)
	/////Enlever tout les espaces superflues/////
	firstArray = strings.Fields(filecontent)
	// ///Retransformer le tout en une phrase pour gérer les erreurs de l'utilisateur/////
	filecontent = strings.Join(firstArray, " ")

	// s := "( cap ) (word(cap)) ,(cap) . (low, 2) , a 'hello'"

	/////Gérer les erreurs liées aux parenthéses/////
	filecontent = Spaces(filecontent)
	filecontent = strings.ReplaceAll(filecontent, "( ", "(")
	filecontent = strings.ReplaceAll(filecontent, " )", ")")
	filecontent = strings.ReplaceAll(filecontent, "(", " (")
	filecontent = strings.ReplaceAll(filecontent, ")", ") ")

	/////Séparer toutes les ponctuations, ' compris, avec les élémentss suivants et précédents/////
	filecontent = Ponctuations(filecontent)
	/////Retour vers un tableau de string pour les isoler/////
	firstArray = strings.Fields(filecontent)
	/////Réunir les (low et , pour respecter le format
	firstArray = ReunionWithCommas(firstArray)
	/////Retransformer le tout pour éviter les espaces/////
	firstArray = Restructuration(firstArray)
	/////permuter les ponctuations et les (cap) et consort/////
	firstArray = Permutation(firstArray)
	/////Retour vers une phrase pour appliquer les modifications liées aux régles "gramaticale" /////
	filecontent = strings.Join(firstArray, " ")
	/////Appliquer les changements pour la permutation deCs ponctuations/////
	filecontent = ApplyChangeForPermutations(filecontent)
	/////Appliquer les changements pour les apostrophes/////
	filecontent = Apostrophe(filecontent)
	/////Retour vers un tableau de string/////
	firstArray = strings.Fields(filecontent)

	for i := 0; i < len(firstArray); i++ {
		if Contains(all, firstArray[i]) && len(finalArray) == 0 {
			//par exemple si s[i] == (cap) mais que rien n'est stocké dans t alors qu'il ne fasse rien

		} else if Contains(once, firstArray[i]) && i == len(firstArray)-1 {
			//par exemple si on n'a (low, comme dernier élément
		} else if firstArray[i] == "(hex)" && len(finalArray) != 0 {
			number, hex := ConvertBaseHexToTen(finalArray[len(finalArray)-1])
			if hex {
				finalArray[len(finalArray)-1] = number
			}

		} else if firstArray[i] == "(bin)" && len(finalArray) != 0 {
			number, bin := ConvertBaseBinToTen(finalArray[len(finalArray)-1])
			if bin {
				finalArray[len(finalArray)-1] = number
			}

		} else if firstArray[i] == "(cap)" && len(finalArray) != 0 {
			finalArray[len(finalArray)-1] = Capitalise(finalArray[len(finalArray)-1])
		} else if firstArray[i] == "(up)" && len(finalArray) != 0 {
			finalArray[len(finalArray)-1] = strings.ToUpper(finalArray[len(finalArray)-1])
		} else if firstArray[i] == "(low)" && len(finalArray) != 0 {
			finalArray[len(finalArray)-1] = strings.ToLower(finalArray[len(finalArray)-1])
		} else if firstArray[i] == "(low," && VerifyFormat(firstArray, firstArray[i+1]) && len(finalArray) != 0 {
			number := Trimatoi(firstArray[i+1])
			if number > 0 {
				if number < len(finalArray) {
					for i := len(finalArray) - 1; i >= len(finalArray)-number; i-- {
						finalArray[i] = strings.ToLower(finalArray[i])

					}
				} else if number >= len(finalArray) {
					for i := len(finalArray) - 1; i >= 0; i-- {
						finalArray[i] = strings.ToLower(finalArray[i])

					}
				}
			}

		} else if firstArray[i] == "(cap," && VerifyFormat(firstArray, firstArray[i+1]) && len(finalArray) != 0 {
			number := Trimatoi(firstArray[i+1])
			if number > 0 {
				if number < len(finalArray) {
					for i := len(finalArray) - 1; i >= len(finalArray)-number; i-- {
						finalArray[i] = Capitalise(finalArray[i])

					}
				} else if number >= len(finalArray) {
					for i := len(finalArray) - 1; i >= 0; i-- {
						finalArray[i] = Capitalise(finalArray[i])

					}
				}
			}

		} else if firstArray[i] == "(up," && VerifyFormat(firstArray, firstArray[i+1]) && len(finalArray) != 0 {
			number := Trimatoi(firstArray[i+1])
			if number > 0 {
				if number < len(finalArray) {
					for i := len(finalArray) - 1; i >= len(finalArray)-number; i-- {
						finalArray[i] = strings.ToUpper(finalArray[i])

					}

				} else if number >= len(finalArray) {
					for i := len(finalArray) - 1; i >= 0; i-- {
						finalArray[i] = strings.ToUpper(finalArray[i])

					}

				}
			}

		} else if VerifyFormat(firstArray, firstArray[i]) && (firstArray[i-1] == "(low," || firstArray[i-1] == "(cap," || firstArray[i-1] == "(up,") {

		} else {
			finalArray = append(finalArray, firstArray[i])
		}
	}
	/////Appliquer les changements pour les instances de l'article "a" ou "A"/////
	finalContent := strings.Join(finalArray, " ")
	finalContent = Article(finalContent)

	CreateAndWriteInAFile(output, finalContent)

}

func main() {

	arg := os.Args

	if len(arg) == 3 {
		Try(arg[1], arg[2])
	} else {
		fmt.Println("Peu, trop, ou pas d'élément")
		fmt.Println("Rééssayez!!!")
	}
}
